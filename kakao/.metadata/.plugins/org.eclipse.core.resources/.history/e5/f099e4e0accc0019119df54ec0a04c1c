package com.kakaopay;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.nio.charset.Charset;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;


@RunWith(SpringRunner.class)
@SpringBootTest
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class KakaopayApplicationTests {
	
	private static MediaType HTML_CONTENT_TYPE = new MediaType(MediaType.TEXT_HTML.getType(), MediaType.TEXT_HTML.getSubtype(), Charset.forName("utf8"));
    private static MediaType JSON_CONTENT_TYPE = new MediaType(MediaType.APPLICATION_JSON.getType(), MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));
	
	private MockMvc mockMvc;
	
	// andExpect 메서드에는 MockMvcResultMatchers 클래스의 메서드를 지정
	
	
	@Test
    public void test001XXXList() throws Exception {
        mockMvc.perform(get("/"))                   	              // GET /를 요청
               .andDo(print())                                        // 응답 내용을 출력
               .andExpect(status().isOk())                            // 응답 코드가 200(OK)인지 확인
               .andExpect(content().contentType(HTML_CONTENT_TYPE));  // 컨텐트 타입이 text/html인지 확인
    }
	@Test
	public String login() {
		return "접속완료";
	}

}
